// Generated by CoffeeScript 1.9.0
var arc_mdpt, base, fib, fib_cache, gr, group, initializePath, marker, mousePos, oc, offset, onMouseMove, onResize, scale_text, texts, transform, update_text, zoom;

group = new Group();

mousePos = new Point(0, 0);

zoom = 1;

gr = (Math.sqrt(5) - 1) / 2;

marker = null;

base = Math.pow(gr, 10);

oc = view.center;

offset = 0;

fib_cache = {};

fib = function(n) {
  if (n in fib_cache) {
    return fib_cache[n];
  }
  if (n < 0) {
    return 0;
  }
  if (n === 0) {
    return 1;
  }
  return fib_cache[n] = fib(n - 1) + fib(n - 2);
};

onMouseMove = function(ev) {
  return mousePos = ev.point;
};

transform = function(p, d) {
  if (d === 0) {
    return p;
  }
  if (d === 90) {
    return new Point(-p.x, p.y);
  }
  if (d === 180) {
    return new Point(-p.x, -p.y);
  }
  if (d === 270) {
    return new Point(p.x, -p.y);
  }
};

update_text = function() {
  var t, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = texts.length; _i < _len; _i++) {
    t = texts[_i];
    _results.push(t.content = fib(t.data.n + offset));
  }
  return _results;
};

scale_text = function(ratio) {
  var t, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = texts.length; _i < _len; _i++) {
    t = texts[_i];
    t.data.scale *= ratio;
    t.scale(ratio);
    t.position = t.data.marker.position - transform(new Point(-t.bounds.width / 2, -t.bounds.height / 2), t.data.dir);
    _results.push(t.visible = t.data.n <= 1 ? t.data.scale < 0.1 : t.data.marker.position.getDistance(marker.position) > 5);
  }
  return _results;
};

document.addEventListener('mousewheel', function(event) {
  var c, cmp, factor, i, interval;
  factor = 1 + Math.abs(event.wheelDelta / 360);
  if (event.wheelDelta < 0) {
    factor = 1 / factor;
  }
  i = 0;
  c = Math.pow(factor, 1 / 20);
  cmp = mousePos;
  interval = setInterval(function() {
    var a, b;
    a = group.position;
    group.scale(c, cmp);
    b = group.position;
    scale_text(1 / c);
    zoom *= c;
    view.zoom = view.zoom;
    if (zoom < base * Math.pow(gr, 12)) {
      zoom *= Math.pow(gr, -12);
      group.scale(Math.pow(gr, -12), marker.position);
      offset += 12;
      update_text();
      scale_text(Math.pow(gr, 12));
    }
    if (zoom > base * Math.pow(gr, -12)) {
      zoom *= Math.pow(gr, 12);
      group.scale(Math.pow(gr, 12), marker.position);
      offset -= 12;
      update_text();
      scale_text(Math.pow(gr, -12));
    }
    i++;
    if (i > 20) {
      return clearInterval(interval);
    }
  }, 1 / 120);
});

arc_mdpt = function(from, to, origin) {
  var angle, mdpt, radius;
  mdpt = new Point((from.x + to.x) / 2, (from.y + to.y) / 2);
  angle = Math.atan2(mdpt.x - origin.x, mdpt.y - origin.y);
  radius = from.getDistance(origin);
  return new Point(origin.x + Math.sin(angle) * radius, origin.y + Math.cos(angle) * radius);
};

texts = [];

window.t = texts;

initializePath = function() {
  var a, arc, arcCenter, b, dir, end, i, m, mdpt, r, start, _i, _ref, _ref1;
  arcCenter = new Point(0, 0);
  _ref = [0, 1], a = _ref[0], b = _ref[1];
  dir = 0;
  marker = new Path.Circle(arcCenter, 0);
  group.addChild(marker);
  for (i = _i = 0; _i <= 40; i = ++_i) {
    start = new Point(arcCenter.x, arcCenter.y + b).rotate(dir, arcCenter);
    end = new Point(arcCenter.x + b, arcCenter.y).rotate(dir, arcCenter);
    mdpt = arc_mdpt(start, end, arcCenter);
    arc = new Path.Arc(start, mdpt, end);
    arc.strokeColor = 'white';
    arc.strokeWidth = 2;
    r = new Path.Rectangle(start, end);
    r.strokeColor = 'white';
    r.strokeWidth = 0.5;
    m = new Path.Circle(arcCenter, 0);
    group.addChild(arc);
    group.addChild(r);
    group.addChild(m);
    arcCenter += (new Point(0, a)).rotate(dir + 180);
    _ref1 = [b, a + b], a = _ref1[0], b = _ref1[1];
    dir += 90;
    dir %= 360;
  }
  group.translate(view.center);
  group.scale(base, marker.position);
  offset = -18;
  update_text();
  scale_text(1 / base);
  zoom *= base;
};

initializePath();

onResize = function() {
  group.translate((view.center - oc) / 2);
  return oc = view.center;
};
